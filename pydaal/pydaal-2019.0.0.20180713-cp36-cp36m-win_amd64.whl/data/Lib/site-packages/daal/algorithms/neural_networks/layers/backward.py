# Copyright 2014-2018 Intel Corporation.
#
# This software and the related documents are Intel copyrighted  materials,  and
# your use of  them is  governed by the  express license  under which  they were
# provided to you (License).  Unless the License provides otherwise, you may not
# use, modify, copy, publish, distribute,  disclose or transmit this software or
# the related documents without Intel's prior written permission.
#
# This software and the related documents  are provided as  is,  with no express
# or implied  warranties,  other  than those  that are  expressly stated  in the
# License.



from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_backward4', [dirname(__file__)])
        except ImportError:
            import _backward4
            return _backward4
        if fp is not None:
            try:
                _mod = imp.load_module('_backward4', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _backward4 = swig_import_helper()
    del swig_import_helper
else:
    import _backward4
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import daal.algorithms.neural_networks.layers
import daal.algorithms.neural_networks.initializers
import daal.algorithms.neural_networks
import daal.algorithms
import daal.data_management
import daal
import daal.services
import daal.data_management.features
import daal.algorithms.neural_networks.layers.forward
import daal.algorithms.engines.mt19937
import daal.algorithms.engines

_backward4.inputGradient_swigconstant(_backward4)
inputGradient = _backward4.inputGradient

_backward4.lastInputId_swigconstant(_backward4)
lastInputId = _backward4.lastInputId

_backward4.inputFromForward_swigconstant(_backward4)
inputFromForward = _backward4.inputFromForward

_backward4.lastInputLayerDataId_swigconstant(_backward4)
lastInputLayerDataId = _backward4.lastInputLayerDataId

_backward4.gradient_swigconstant(_backward4)
gradient = _backward4.gradient

_backward4.weightDerivatives_swigconstant(_backward4)
weightDerivatives = _backward4.weightDerivatives

_backward4.biasDerivatives_swigconstant(_backward4)
biasDerivatives = _backward4.biasDerivatives

_backward4.lastResultId_swigconstant(_backward4)
lastResultId = _backward4.lastResultId

_backward4.resultLayerData_swigconstant(_backward4)
resultLayerData = _backward4.resultLayerData

_backward4.lastResultLayerDataId_swigconstant(_backward4)
lastResultLayerDataId = _backward4.lastResultLayerDataId
class InputIface(daal.algorithms.Input):
    __swig_setmethods__ = {}
    for _s in [daal.algorithms.Input]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputIface, name, value)
    __swig_getmethods__ = {}
    for _s in [daal.algorithms.Input]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputIface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _backward4.new_InputIface(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _backward4.delete_InputIface
    __del__ = lambda self: None
InputIface_swigregister = _backward4.InputIface_swigregister
InputIface_swigregister(InputIface)

class Input(InputIface):
    __swig_setmethods__ = {}
    for _s in [InputIface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [InputIface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _backward4.new_Input(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _backward4.delete_Input
    __del__ = lambda self: None

    def getInput(self, id):
        return _backward4.Input_getInput(self, id)

    def getInputLayerData(self, id):
        return _backward4.Input_getInputLayerData(self, id)

    def setInput(self, id, ptr):
        return _backward4.Input_setInput(self, id, ptr)

    def setInputLayerData(self, id, ptr):
        return _backward4.Input_setInputLayerData(self, id, ptr)

    def addInputGradient(self, igTensor, index):
        return _backward4.Input_addInputGradient(self, igTensor, index)

    def setInputFromForward(self, result):
        return _backward4.Input_setInputFromForward(self, result)

    def check(self, par, method):
        return _backward4.Input_check(self, par, method)

    def getLayout(self):
        return _backward4.Input_getLayout(self)
Input_swigregister = _backward4.Input_swigregister
Input_swigregister(Input)

class Result(daal.algorithms.Result):
    __swig_setmethods__ = {}
    for _s in [daal.algorithms.Result]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    for _s in [daal.algorithms.Result]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _backward4.new_Result()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _backward4.delete_Result
    __del__ = lambda self: None

    def getResult(self, id):
        return _backward4.Result_getResult(self, id)

    def setResult(self, id, ptr):
        return _backward4.Result_setResult(self, id, ptr)

    def getResultLayerData(self, id):
        return _backward4.Result_getResultLayerData(self, id)

    def setResultLayerData(self, id, ptr):
        return _backward4.Result_setResultLayerData(self, id, ptr)

    def getSerializationTag(self):
        return _backward4.Result_getSerializationTag(self)

    def check(self, input, parameter, method):
        return _backward4.Result_check(self, input, parameter, method)

    def getLayout(self):
        return _backward4.Result_getLayout(self)

    def getGradient(self, index):
        return _backward4.Result_getGradient(self, index)

    def allocate_Float64(self, input, par, method):
        r"""
    This function is specialized for float64"""
        return _backward4.Result_allocate_Float64(self, input, par, method)


    def allocate_Float32(self, input, par, method):
        r"""
    This function is specialized for float32"""
        return _backward4.Result_allocate_Float32(self, input, par, method)

Result_swigregister = _backward4.Result_swigregister
Result_swigregister(Result)

class LayerIface(daal.algorithms.Analysis_Batch):
    __swig_setmethods__ = {}
    for _s in [daal.algorithms.Analysis_Batch]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerIface, name, value)
    __swig_getmethods__ = {}
    for _s in [daal.algorithms.Analysis_Batch]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerIface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _backward4.delete_LayerIface
    __del__ = lambda self: None

    def getLayerResult(self):
        return _backward4.LayerIface_getLayerResult(self)

    def getLayerInput(self):
        return _backward4.LayerIface_getLayerInput(self)

    def getLayerParameter(self):
        return _backward4.LayerIface_getLayerParameter(self)

    def clone(self):
        return _backward4.LayerIface_clone(self)

    def allocateResult(self):
        return _backward4.LayerIface_allocateResult(self)

    def addInput(self, result, resultIndex, inputIndex):
        return _backward4.LayerIface_addInput(self, result, resultIndex, inputIndex)
LayerIface_swigregister = _backward4.LayerIface_swigregister
LayerIface_swigregister(LayerIface)

class LayerIfaceImpl(LayerIface):
    __swig_setmethods__ = {}
    for _s in [LayerIface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerIfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [LayerIface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerIfaceImpl, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _backward4.delete_LayerIfaceImpl
    __del__ = lambda self: None

    def addInput(self, result, resultIndex, inputIndex):
        return _backward4.LayerIfaceImpl_addInput(self, result, resultIndex, inputIndex)
LayerIfaceImpl_swigregister = _backward4.LayerIfaceImpl_swigregister
LayerIfaceImpl_swigregister(LayerIfaceImpl)

from numpy import float64, float32, intc


# This file is compatible with both classic and new-style classes.


